// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.Bot.Builder.Adapters;
using Microsoft.Bot.Builder.Dialogs.Adaptive.Recognizers;
using Microsoft.Bot.Builder.Dialogs.Recognizers;
using Xunit;

namespace Microsoft.Bot.Builder.Dialogs.Declarative.Tests
{
    /// <summary>
    /// Test speech priming functionality.
    /// </summary>
    public class PrimingTests
    {
        public static IEnumerable<object[]> Expected
            => new[]
            {
                // Entity recognizers
                new object[] { new AgeEntityRecognizer(), null, new[] { new EntityDescription("age") }, null },
                new object[] { new ChannelMentionEntityRecognizer(), null, new[] { new EntityDescription("channelMention") }, null },
                new object[] { new ConfirmationEntityRecognizer(), null, new[] { new EntityDescription("boolean") }, null },
                new object[] { new CurrencyEntityRecognizer(), null, new[] { new EntityDescription("currency") }, null },
                new object[] { new DateTimeEntityRecognizer(), null, new[] { new EntityDescription("datetime") }, null },
                new object[] { new DimensionEntityRecognizer(), null, new[] { new EntityDescription("dimension") }, null },
                new object[] { new EmailEntityRecognizer(), null, new[] { new EntityDescription("email") }, null },
                new object[] { new GuidEntityRecognizer(), null, new[] { new EntityDescription("guid") }, null },
                new object[] { new HashtagEntityRecognizer(), null, new[] { new EntityDescription("hashtag") }, null },
                new object[] { new IpEntityRecognizer(), null, new[] { new EntityDescription("ip") }, null },
                new object[] { new MentionEntityRecognizer(), null, new[] { new EntityDescription("mention") }, null },
                new object[] { new NumberEntityRecognizer(), null, new[] { new EntityDescription("number") }, null },
                new object[] { new NumberRangeEntityRecognizer(), null, new[] { new EntityDescription("numberrange") }, null },
                new object[] { new OrdinalEntityRecognizer(), null, new[] { new EntityDescription("ordinal") }, null },
                new object[] { new PercentageEntityRecognizer(), null, new[] { new EntityDescription("percentage") }, null },
                new object[] { new PhoneNumberEntityRecognizer(), null, new[] { new EntityDescription("phonenumber") }, null },
                new object[] { new RegexEntityRecognizer() { Id = "somePattern", Name = "pattern" }, null, new[] { new EntityDescription("pattern", "somePattern") }, null },
                new object[] { new TemperatureEntityRecognizer(), null, new[] { new EntityDescription("temperature") }, null },
                new object[] { new UrlEntityRecognizer(), null, new[] { new EntityDescription("url") }, null },

                // LUIS
                new object[]
                {
                    new AI.Luis.LuisAdaptiveRecognizer()
                    {
                        // The source would be generated by tooling and this is to distinguish the intent/entity across applications.
                        // With package namespacing a component should name it with the package prefix, i.e. Microsoft.Welcome#foo.lu.
                        PossibleIntents = new[] { new IntentDescription("intent1", "foo.lu") },
                        PossibleEntities = new[] { new EntityDescription("entity1", "foo.lu"), new EntityDescription("dlist", "foo.lu") },
                        DynamicLists = new[]
                        {
                                new AI.Luis.DynamicList()
                                {
                                    Entity = "dlist",
                                    List = new List<AI.LuisV3.ListElement>
                                    {
                                        new AI.LuisV3.ListElement("value", new List<string> { "synonym1", "synonym2" })
                                    }
                                }
                        }
                    },
                    new[] { new IntentDescription("intent1", "foo.lu") },
                    new[] { new EntityDescription("entity1", "foo.lu"), new EntityDescription("dlist", "foo.lu") },
                    new[] { "dlist" }
                },

                // QnA doesn't have any priming information
                new object[]
                {
                    new AI.QnA.Recognizers.QnAMakerRecognizer(),
                    null, null, null
                }
            };

        [Theory]
        [MemberData(nameof(Expected))]
        public async Task RecognizerDescriptionTests(Recognizer recognizer, IntentDescription[] intents, EntityDescription[] entities, string[] lists)
        {
            var description = await recognizer.GetRecognizerDescriptionAsync(GetTurnContext(recognizer));

            if (intents != null)
            {
                Assert.Equal(intents.Length, description.Intents.Count);
                Assert.All(description.Intents, (intent) => Assert.Contains(intent, intents));
            }
            else
            {
                Assert.Empty(description.Intents);
            }

            if (entities != null)
            {
                Assert.Equal(entities.Length, description.Entities.Count);
                Assert.All(description.Entities, (entity) => Assert.Contains(entity, entities));
            }
            else
            {
                Assert.Empty(description.Entities);
            }

            if (lists != null)
            {
                Assert.Equal(lists.Length, description.DynamicLists.Count);
                Assert.All(description.DynamicLists, (list) => Assert.Contains(list.Entity, lists));
            }
            else
            {
                Assert.Empty(description.DynamicLists);
            }
        }

        private DialogContext GetTurnContext(Recognizer recognizer)
        {
            return new DialogContext(
                new DialogSet(),
                new TurnContext(
                    new TestAdapter(TestAdapter.CreateConversation(recognizer.GetType().ToString())),
                    new Schema.Activity()),
                new DialogState());
        }
    }
}
